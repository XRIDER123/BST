# Python implementation to construct a BST
# from its level order traversal

# Importing essential libraries
from collections import deque

# Node of a BST


class Node:
	def __init__(self, data):
		self.data = data
		self.left = None
		self.right = None


def constructBst(arr, n):
	queue = deque()
	if n == 0:
		return None

	# Create root node and store a copy of it in head
	root = Node(arr[0])
	head = root

	# Push the root node and the initial range
	queue.append((root, (-float("inf"), float("inf"))))
	i = 1

	# Loop over the contents of arr to process all the elements using
	# while loop we may have to process atmost 2 child's
	while i < n:

		# Get the node and the range at the front of the queue
		# and popout the leftmost element
		temp = queue[0][0]
		tempRange = queue[0][1]
		queue.popleft()

		# Check if arr[i] can be left child and within range of it's parent data
		if (arr[i] < temp.data) and tempRange[0] < arr[i] < tempRange[1]:

			# Set the left child and new range for the child
			temp.left = Node(arr[i])
			queue.append((temp.left, (tempRange[0], temp.data)))
			i += 1

		# Check if arr[i] can be right child and within range of it's parent data
		if arr[i] > temp.data and tempRange[0] < arr[i] < tempRange[1]:

			# Set the right child and new range for the child
			temp.right = Node(arr[i])
			queue.append((temp.right, (temp.data, tempRange[1])))
			i += 1
	return head


def inorderTraversal(root):
	if (root == None):
		return None

	inorderTraversal(root.left)
	print(root.data, end=" ")
	inorderTraversal(root.right)


# Driver program
if __name__ == '__main__':

	arr = [7, 4, 12, 3, 6, 8, 1, 5, 10]
	n = len(arr)

	root = constructBst(arr, n)

	print("Inorder Traversal: ")
	root = inorderTraversal(root)


# This code is contributed by Divyanshu Singh
